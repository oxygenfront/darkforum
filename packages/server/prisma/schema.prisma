generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum ROLE {
  user
  admin
  warrantor
  seller
}

enum ReactionType {
  LIKE
  DISLIKE
}

model UserReactions {
  id             String       @id @default(uuid())
  userId         String
  themeMessageId String
  reactionType   ReactionType
  user           User         @relation(fields: [userId], references: [id])
  themeMessage   ThemeMessage @relation(fields: [themeMessageId], references: [id])
}

model User {
  id           String   @id @default(uuid())
  userImage    String?
  userLogin    String
  userPassword String
  userEmail    String   @unique
  role         ROLE
  userThemes   Theme[]
  createdAt    DateTime @default(now())

  userReaction  UserReactions[]
  themeMessages ThemeMessage[]

  is_show_animated_avatar Boolean @default(false)
  is_close_wall_on_change Boolean @default(false)
  is_show_status_online   Boolean @default(false)
  is_private              Boolean @default(false)

  refreshToken String?
  Chat         Chat[]
  ChatUser     ChatUser[]
  avatarColor  String
  ChatMessage  ChatMessage[]
}

model ThemeMessage {
  id            String          @id @default(uuid())
  userId        String
  content       String
  theme         Theme           @relation(fields: [themeId], references: [id])
  themeId       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userReactions UserReactions[]
  user          User?           @relation(fields: [userId], references: [id])

  replies     MessageReplies[] @relation("MessageRepliesToMessage")
  respondedTo MessageReplies[] @relation("MessageRepliesToReply")
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  replies     ChatMessageReplies[] @relation("ChatMessageRepliesToMessage")
  respondedTo ChatMessageReplies[] @relation("ChatMessageRepliesToReply")
}

model ChatMessageReplies {
  id              String      @id @default(uuid())
  parentMessage   ChatMessage @relation("ChatMessageRepliesToMessage", fields: [parentMessageId], references: [id])
  parentMessageId String

  childMessage   ChatMessage @relation("ChatMessageRepliesToReply", fields: [childMessageId], references: [id])
  childMessageId String
}

model MessageReplies {
  id              String       @id @default(uuid())
  parentMessage   ThemeMessage @relation("MessageRepliesToMessage", fields: [parentMessageId], references: [id])
  parentMessageId String

  childMessage   ThemeMessage @relation("MessageRepliesToReply", fields: [childMessageId], references: [id])
  childMessageId String
}

model Theme {
  id            String         @id @default(uuid())
  user          User?          @relation(fields: [userId], references: [id])
  userId        String
  chapter       Chapter?       @relation(fields: [chapterId], references: [id])
  chapterId     String
  themeTitle    String
  themeMessages ThemeMessage[]
  isPrivate     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  views         Int?
}

model Chapter {
  id String @id @default(uuid())

  titleChapter  String
  chapterThemes Theme[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Chat {
  id           String        @id @default(uuid())
  title        String?
  createdAt    DateTime      @default(now())
  creatorId    String
  creator      User          @relation(fields: [creatorId], references: [id])
  users        ChatUser[]
  chatMessages ChatMessage[]
}

model ChatUser {
  id     String @id @default(uuid())
  chatId String
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}
